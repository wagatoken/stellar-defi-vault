{"$message_type":"diagnostic","message":"unused imports: `PAXG_ASSET`, `STORAGE_INSTANCE_PERSISTENT`, and `WISDOMTREE_GOLD`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":65,"byte_end":75,"line_start":3,"line_end":3,"column_start":41,"column_end":51,"is_primary":true,"text":[{"text":"    DepositInfo, LockPeriod, VaultType, PAXG_ASSET, STORAGE_INSTANCE_PERSISTENT, WISDOMTREE_GOLD,","highlight_start":41,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":77,"byte_end":104,"line_start":3,"line_end":3,"column_start":53,"column_end":80,"is_primary":true,"text":[{"text":"    DepositInfo, LockPeriod, VaultType, PAXG_ASSET, STORAGE_INSTANCE_PERSISTENT, WISDOMTREE_GOLD,","highlight_start":53,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":106,"byte_end":121,"line_start":3,"line_end":3,"column_start":82,"column_end":97,"is_primary":true,"text":[{"text":"    DepositInfo, LockPeriod, VaultType, PAXG_ASSET, STORAGE_INSTANCE_PERSISTENT, WISDOMTREE_GOLD,","highlight_start":82,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":63,"byte_end":121,"line_start":3,"line_end":3,"column_start":39,"column_end":97,"is_primary":true,"text":[{"text":"    DepositInfo, LockPeriod, VaultType, PAXG_ASSET, STORAGE_INSTANCE_PERSISTENT, WISDOMTREE_GOLD,","highlight_start":39,"highlight_end":97}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `PAXG_ASSET`, `STORAGE_INSTANCE_PERSISTENT`, and `WISDOMTREE_GOLD`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/gold-vault/src/lib.rs:3:41\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DepositInfo, LockPeriod, VaultType, PAXG_ASSET, STORAGE_INSTANCE_PERSISTENT, WISDOMTREE_GOLD,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":3980,"byte_end":3995,"line_start":114,"line_end":114,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        env.invoke_contract(","highlight_start":13,"highlight_end":28}],"label":"cannot infer type of the type parameter `T` declared on the method `invoke_contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: TryFromVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following types implement trait `TryFromVal<E, V>`:\n  `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\n  `()` implements `TryFromVal<E, soroban_sdk::Val>`\n  `()` implements `TryFromVal<Env, ()>`\n  `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\nand 339 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::invoke_contract`","code":null,"level":"note","spans":[{"file_name":"/Users/manu-acho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-21.7.7/src/env.rs","byte_start":11889,"byte_end":11904,"line_start":370,"line_end":370,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"    pub fn invoke_contract<T>(","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/manu-acho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-21.7.7/src/env.rs","byte_start":12046,"byte_end":12066,"line_start":377,"line_end":377,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        T: TryFromVal<Env, Val>,","highlight_start":12,"highlight_end":32}],"label":"required by this bound in `Env::invoke_contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider specifying the generic argument","code":null,"level":"help","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":3995,"byte_end":3995,"line_start":114,"line_end":114,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        env.invoke_contract(","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":"::<T>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/gold-vault/src/lib.rs:114:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.invoke_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `T` declared on the method `invoke_contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: cannot satisfy `_: TryFromVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following types implement trait `TryFromVal<E, V>`:\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<Env, ()>`\u001b[0m\n\u001b[0m              `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m              `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m              `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m            and 339 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::invoke_contract`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/manu-acho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-21.7.7/src/env.rs:377:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn invoke_contract<T>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Env::invoke_contract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        env.invoke_contract\u001b[0m\u001b[0m\u001b[38;5;10m::<T>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type annotations needed","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":5787,"byte_end":5802,"line_start":172,"line_end":172,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        env.invoke_contract(","highlight_start":13,"highlight_end":28}],"label":"cannot infer type of the type parameter `T` declared on the method `invoke_contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: TryFromVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following types implement trait `TryFromVal<E, V>`:\n  `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\n  `()` implements `TryFromVal<E, soroban_sdk::Val>`\n  `()` implements `TryFromVal<Env, ()>`\n  `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\nand 339 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::invoke_contract`","code":null,"level":"note","spans":[{"file_name":"/Users/manu-acho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-21.7.7/src/env.rs","byte_start":11889,"byte_end":11904,"line_start":370,"line_end":370,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"    pub fn invoke_contract<T>(","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/manu-acho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-21.7.7/src/env.rs","byte_start":12046,"byte_end":12066,"line_start":377,"line_end":377,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        T: TryFromVal<Env, Val>,","highlight_start":12,"highlight_end":32}],"label":"required by this bound in `Env::invoke_contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider specifying the generic argument","code":null,"level":"help","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":5802,"byte_end":5802,"line_start":172,"line_end":172,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        env.invoke_contract(","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":"::<T>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/gold-vault/src/lib.rs:172:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        env.invoke_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `T` declared on the method `invoke_contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: cannot satisfy `_: TryFromVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following types implement trait `TryFromVal<E, V>`:\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<Env, ()>`\u001b[0m\n\u001b[0m              `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m              `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m              `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m            and 339 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::invoke_contract`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/manu-acho/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/soroban-sdk-21.7.7/src/env.rs:377:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn invoke_contract<T>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Env::invoke_contract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        env.invoke_contract\u001b[0m\u001b[0m\u001b[38;5;10m::<T>\u001b[0m\u001b[0m(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"can't compare `&soroban_sdk::Address` with `soroban_sdk::Address`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":12322,"byte_end":12324,"line_start":361,"line_end":361,"column_start":19,"column_end":21,"is_primary":true,"text":[{"text":"            asset == first_asset.clone()","highlight_start":19,"highlight_end":21}],"label":"no implementation for `&soroban_sdk::Address == soroban_sdk::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `PartialEq<soroban_sdk::Address>` is not implemented for `&soroban_sdk::Address`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider dereferencing here","code":null,"level":"help","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":12316,"byte_end":12316,"line_start":361,"line_end":361,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            asset == first_asset.clone()","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: can't compare `&soroban_sdk::Address` with `soroban_sdk::Address`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/gold-vault/src/lib.rs:361:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            asset == first_asset.clone()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno implementation for `&soroban_sdk::Address == soroban_sdk::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `PartialEq<soroban_sdk::Address>` is not implemented for `&soroban_sdk::Address`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider dereferencing here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m*\u001b[0m\u001b[0masset == first_asset.clone()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `env`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":9889,"byte_end":9892,"line_start":288,"line_end":288,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"    pub fn calculate_yield_rate(env: Env, lock_period: LockPeriod) -> u128 {","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"contracts/gold-vault/src/lib.rs","byte_start":9889,"byte_end":9892,"line_start":288,"line_end":288,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"    pub fn calculate_yield_rate(env: Env, lock_period: LockPeriod) -> u128 {","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":"_env","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `env`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/gold-vault/src/lib.rs:288:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn calculate_yield_rate(env: Env, lock_period: LockPeriod) -> u128 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0283.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0283.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
